{"checkerList":[{"code":"argumentsize","name":"argumentSize","type":"NONE","version":"0.10.3","description":"Passing too small array as argument.","isActive":false,"properties":{},"cwe":0},{"code":"arithoperationsonvoidpointer","name":"arithOperationsOnVoidPointer","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"When using void pointers in calculations, the behaviour is undefined","isActive":true,"properties":{},"cwe":0},{"code":"arrayindexoutofbounds","name":"arrayIndexOutOfBounds","type":"BOTH","severityCode":"ETC","version":"0.10.3","description":"Array index out of bounds","isActive":true,"properties":{},"cwe":0},{"code":"arrayindexoutofboundscond","name":"arrayIndexOutOfBoundsCond","type":"BOTH","severityCode":"ETC","version":"0.10.3","description":"Array index out of bounds","isActive":true,"properties":{},"cwe":0},{"code":"arrayindexthencheck","name":"arrayIndexThenCheck","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Array index is used before limits check","isActive":true,"properties":{},"cwe":0},{"code":"assertwithsideeffect","name":"assertWithSideEffect","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Assert with side effect","isActive":true,"properties":{},"cwe":0},{"code":"assignbooltopointer","name":"assignBoolToPointer","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Assigning bool value to pointer (converting bool value to address)","isActive":true,"properties":{},"cwe":0},{"code":"assigniferror","name":"assignIfError","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Mismatching assignment and comparison, comparison is always false","isActive":true,"properties":{},"cwe":0},{"code":"assignmentaddresstointeger","name":"AssignmentAddressToInteger","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Assigning an address value to an integer (int/long/etc.) type is not portable","isActive":true,"properties":{},"cwe":0},{"code":"assignmentinassert","name":"assignmentInAssert","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Redefinition of a member variable in a subclass.","isActive":true,"properties":{},"cwe":0},{"code":"assignmentintegertoaddress","name":"AssignmentIntegerToAddress","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Assigning an integer (int/long/etc) to a pointer is not portable","isActive":true,"properties":{},"cwe":0},{"code":"autovariables","name":"autoVariables","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Assigning address of local auto-variable to a function parameter","isActive":true,"properties":{},"cwe":0},{"code":"autovarinvaliddeallocation","name":"autovarInvalidDeallocation","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Deallocating auto-variable is invalid","isActive":true,"properties":{},"cwe":0},{"code":"badbitmaskcheck","name":"badbitmaskcheck","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Bad bit mask check.","isActive":true,"properties":{},"cwe":0},{"code":"bitwiseonboolean","name":"bitwiseOnBoolean","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Boolean variable is used in bitwise operation","isActive":true,"properties":{},"cwe":0},{"code":"boostforeacherror","name":"boostForeachError","type":"NONE","version":"0.10.3","description":"Invalid usage of BOOST_FOREACH","isActive":false,"properties":{},"cwe":0},{"code":"bufferaccessoutofbounds","name":"bufferAccessOutOfBounds","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Buffer access out-of-bounds","isActive":true,"properties":{},"cwe":0},{"code":"buffernotzeroterminated","name":"bufferNotZeroTerminated","type":"NONE","version":"0.10.3","description":"Buffer is not zero-terminated","isActive":false,"properties":{},"cwe":0},{"code":"castaddresstointegeratreturn","name":"CastAddressToIntegerAtReturn","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Returning an address value in a function with integer return type is not portable","isActive":true,"properties":{},"cwe":0},{"code":"castintegertoaddressatreturn","name":"CastIntegerToAddressAtReturn","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Returning an integer in a function with pointer return type is not portable","isActive":true,"properties":{},"cwe":0},{"code":"catchexceptionbyvalue","name":"catchExceptionByValue","type":"REVIEW","version":"0.10.3","description":"Exception should be caught by reference","isActive":false,"properties":{},"cwe":0},{"code":"chararrayindex","name":"charArrayIndex","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Using char type as array index","isActive":true,"properties":{},"cwe":0},{"code":"charbitop","name":"charBitOp","type":"NONE","version":"0.10.3","description":"When using char variables in bit operations, sign extension can generate unexpected results","isActive":false,"properties":{},"cwe":0},{"code":"charliteralwithcharptrcompare","name":"charliteralwithcharptrcompare","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Comparing char literal with char pointer.","isActive":true,"properties":{},"cwe":0},{"code":"checkcastinttocharandback","name":"checkCastIntToCharAndBack","type":"NONE","version":"0.10.3","description":"Storing func_name() return value in char variable and then comparing with EOF.","isActive":false,"properties":{},"cwe":0},{"code":"clarifycalculation","name":"clarifyCalculation","type":"NONE","version":"0.10.3","description":"Clarify calculation precedence for + and ?","isActive":false,"properties":{},"cwe":0},{"code":"clarifycondition","name":"clarifyCondition","type":"NONE","version":"0.10.3","description":"Suspicious condition (assignment+comparison)","isActive":false,"properties":{},"cwe":0},{"code":"clarifystatement","name":"clarifyStatement","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Check statement and clarify behavior","isActive":true,"properties":{},"cwe":0},{"code":"class_x_y","name":"class_X_Y","type":"NONE","version":"0.10.3","description":"NONE","isActive":false,"properties":{},"cwe":0},{"code":"commaseparatedreturn","name":"commaSeparatedReturn","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Usage of comma in return statements","isActive":true,"properties":{},"cwe":0},{"code":"compareboolexpressionwithint","name":"compareBoolExpressionWithInt","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Comparison of a boolean expression with an integer other than 0 or 1","isActive":true,"properties":{},"cwe":0},{"code":"comparisonerror","name":"comparisonError","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Expression is always false","isActive":true,"properties":{},"cwe":0},{"code":"comparisonofboolwithboolerror","name":"comparisonOfBoolWithBoolError","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Comparison of a variable having boolean value using relational (\u003c, \u003e, \u003c\u003d or \u003e\u003d) operator","isActive":true,"properties":{},"cwe":0},{"code":"comparisonofboolwithint","name":"comparisonOfBoolWithInt","type":"REVIEW","version":"0.10.3","description":"Suspicious comparison of a boolean with an integer","isActive":false,"properties":{},"cwe":0},{"code":"comparisonofboolwithinvalidcomparator","name":"comparisonOfBoolWithInvalidComparator","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Comparison of a boolean value using relational (\u003c, \u003e, \u003c\u003d or \u003e\u003d) operator","isActive":true,"properties":{},"cwe":0},{"code":"comparisonoffuncreturningboolerror","name":"comparisonOfFuncReturningBoolError","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Comparison of a function returning boolean value using relational (\u003c, \u003e, \u003c\u003d or \u003e\u003d) operator","isActive":true,"properties":{},"cwe":0},{"code":"comparisonoftwofuncsreturningboolerror","name":"comparisonOfTwoFuncsReturningBoolError","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Comparison of two functions returning boolean value using relational (\u003c, \u003e, \u003c\u003d or \u003e\u003d) operator","isActive":true,"properties":{},"cwe":0},{"code":"complexpatternerror","name":"complexPatternError","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Found complex pattern inside call","isActive":true,"properties":{},"cwe":0},{"code":"conditionalwaystruefalse","name":"conditionAlwaysTrueFalse","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Condition is always true/false","isActive":true,"properties":{},"cwe":0},{"code":"configurationnotchecked","name":"ConfigurationNotChecked","type":"NONE","version":"0.10.3","description":"NONE","isActive":false,"properties":{},"cwe":0},{"code":"conststatement","name":"constStatement","type":"NONE","version":"0.10.3","description":"Redundant code: Found a statement that begins with type constant","isActive":false,"properties":{},"cwe":0},{"code":"copyctorpointercopying","name":"copyCtorPointerCopying","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Value of pointer \u0027varname\u0027, which points to allocated memory, is copied in copy constructor in","isActive":true,"properties":{},"cwe":0},{"code":"coutcerrmisusage","name":"coutCerrMisusage","type":"NONE","version":"0.10.3","description":"Invalid usage of output stream: \u0027\u003c\u003c std::cout\u0027","isActive":false,"properties":{},"cwe":0},{"code":"cppcheckerror","name":"cppcheckError","type":"NONE","version":"0.10.3","description":"Internal cppcheck error","isActive":false,"properties":{},"cwe":0},{"code":"cstylecast","name":"cstyleCast","type":"REVIEW","version":"0.10.3","description":"C-style pointer casting","isActive":false,"properties":{},"cwe":0},{"code":"dangeroususagestrtol","name":"dangerousUsageStrtol","type":"NONE","version":"0.10.3","description":"Invalid radix in call to strtol or strtoul. Must be 0 or 2-36","isActive":false,"properties":{},"cwe":0},{"code":"deallocdealloc","name":"deallocDealloc","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Deallocating a deallocated pointer","isActive":true,"properties":{},"cwe":0},{"code":"deallocret","name":"deallocret","type":"NONE","version":"0.10.3","description":"Returning/dereferencing variable after it is deallocated / released","isActive":false,"properties":{},"cwe":0},{"code":"deallocuse","name":"deallocuse","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Dereferencing variable after it is deallocated / released","isActive":true,"properties":{},"cwe":0},{"code":"derefinvaliditerator","name":"derefInvalidIterator","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Possible dereference of an invalid iterator","isActive":true,"properties":{},"cwe":0},{"code":"dividesizeof","name":"divideSizeOf","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Divided sizeOf()","isActive":true,"properties":{},"cwe":0},{"code":"doubleclosedir","name":"doubleCloseDir","type":"NONE","version":"0.10.3","description":"Directory handle is closed twice","isActive":false,"properties":{},"cwe":0},{"code":"doublefree","name":"doubleFree","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Memory is freed twice","isActive":true,"properties":{},"cwe":0},{"code":"duplicatebranch","name":"duplicateBranch","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Redundant \u0027if\u0027 and \u0027else\u0027 branches","isActive":true,"properties":{},"cwe":0},{"code":"duplicatebreak","name":"duplicateBreak","type":"REVIEW","version":"0.10.3","description":"Consecutive return, break, continue, goto or throw statements are unnecessary","isActive":false,"properties":{},"cwe":0},{"code":"duplicateexpression","name":"duplicateExpression","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Same expression on both sides of \u0027\u0026\u0026\u0027","isActive":true,"properties":{},"cwe":0},{"code":"duplicateexpressionternary","name":"duplicateexpressionternary","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Duplicate expression ternary. ","isActive":true,"properties":{},"cwe":0},{"code":"duplicateif","name":"duplicateIf","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Redundant \u0027if\u0027-expressions","isActive":true,"properties":{},"cwe":0},{"code":"duplinheritedmember","name":"duplinheritedmember","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Duplicate inherited member. ","isActive":true,"properties":{},"cwe":0},{"code":"erase","name":"erase","type":"NONE","version":"0.10.3","description":"Dangerous iterator usage after erase()-method","isActive":false,"properties":{},"cwe":0},{"code":"erasedereference","name":"eraseDereference","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Dereferenced iterator an already erased iterator","isActive":true,"properties":{},"cwe":0},{"code":"exceptdeallocthrow","name":"exceptDeallocThrow","type":"NONE","version":"0.10.3","description":"Throwing exception in invalid state","isActive":false,"properties":{},"cwe":0},{"code":"exceptrethrowcopy","name":"exceptRethrowCopy","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Throwing a copy of the caught exception instead of re-throwing the original exception","isActive":true,"properties":{},"cwe":0},{"code":"exceptthrowindestructor","name":"exceptThrowInDestructor","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Throwing exception in destructor","isActive":true,"properties":{},"cwe":0},{"code":"fflushoninputstream","name":"fflushOnInputStream","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"fflush() called on input stream \"stdin\" may result in undefined behavior","isActive":true,"properties":{},"cwe":0},{"code":"functionconst","name":"functionConst","type":"NONE","version":"0.10.3","description":"Member function can be const","isActive":false,"properties":{},"cwe":0},{"code":"functionstatic","name":"functionStatic","type":"NONE","version":"0.10.3","description":"The member function \u0027funcname\u0027 can be static","isActive":false,"properties":{},"cwe":0},{"code":"ignoredreturnvalue","name":"ignoredreturnvalue","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Ignored return value.","isActive":true,"properties":{},"cwe":0},{"code":"incompletearrayfill","name":"incompleteArrayFill","type":"NONE","version":"0.10.3","description":"Array \u0027buffer\u0027 is filled incompletely","isActive":false,"properties":{},"cwe":0},{"code":"incorrectlogicoperator","name":"incorrectLogicOperator","type":"NONE","version":"0.10.3","description":"Suspicious use of the \u0027||\u0027 logic operator","isActive":false,"properties":{},"cwe":0},{"code":"incorrectstringbooleanerror","name":"incorrectStringBooleanError","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Suspicious comparison of boolean with a string literal","isActive":true,"properties":{},"cwe":0},{"code":"incorrectstringcompare","name":"incorrectStringCompare","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Mismatch of the string literal and legth argument for substr()","isActive":true,"properties":{},"cwe":0},{"code":"incrementboolean","name":"incrementboolean","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Suspicious use of the postfix \u0027++\u0027 operator on a boolean","isActive":true,"properties":{},"cwe":0},{"code":"initializerlist","name":"initializerList","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Member variable is in wrong order in the initializer list","isActive":true,"properties":{},"cwe":0},{"code":"insecurecmdlineargs","name":"insecureCmdLineArgs","type":"NONE","version":"0.10.3","description":"Buffer overrun possible for long cmd-line args","isActive":false,"properties":{},"cwe":0},{"code":"invalidfree","name":"invalidFree","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Invalid memory address freed","isActive":true,"properties":{},"cwe":0},{"code":"invalidfunctionarg","name":"invalidFunctionArg","type":"NONE","version":"0.10.3","description":"NONE","isActive":false,"properties":{},"cwe":0},{"code":"invalidfunctionargbool","name":"invalidfunctionargbool","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Invalid function argument bool.","isActive":true,"properties":{},"cwe":0},{"code":"invaliditerator1","name":"invalidIterator1","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Invalid iterator","isActive":true,"properties":{},"cwe":0},{"code":"invaliditerator2","name":"invalidIterator2","type":"NONE","version":"0.10.3","description":"Iterators may get invalid after push_back|push_front|insert","isActive":false,"properties":{},"cwe":0},{"code":"invalidlengthmodifiererror","name":"invalidLengthModifierError","type":"NONE","version":"0.10.3","description":"\u0027modifier\u0027 in format string is a length modifier and cannot be used without a conversion specifier","isActive":false,"properties":{},"cwe":0},{"code":"invalidpointer","name":"invalidPointer","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Invalid pointer after push_back / push_front","isActive":true,"properties":{},"cwe":0},{"code":"invalidpointercast","name":"invalidPointerCast","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Invalid pointer casting","isActive":true,"properties":{},"cwe":0},{"code":"invalidprintfargtype_float","name":"invalidPrintfArgType_float","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Invalid printf argument type (floating point number required)","isActive":true,"properties":{},"cwe":0},{"code":"invalidprintfargtype_int","name":"invalidPrintfArgType_int","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Invalid printf argument type (integer required)","isActive":true,"properties":{},"cwe":0},{"code":"invalidprintfargtype_n","name":"invalidPrintfArgType_n","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Invalid printf argument type (integer pointer required)","isActive":true,"properties":{},"cwe":0},{"code":"invalidprintfargtype_p","name":"invalidPrintfArgType_p","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Invalid printf argument type (integer or pointer required)","isActive":true,"properties":{},"cwe":0},{"code":"invalidprintfargtype_s","name":"invalidPrintfArgType_s","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Invalid printf argument type (character pointer required)","isActive":true,"properties":{},"cwe":0},{"code":"invalidprintfargtype_sint","name":"invalidPrintfArgType_sint","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Invalid printf argument type (signed integer required)","isActive":true,"properties":{},"cwe":0},{"code":"invalidprintfargtype_uint","name":"invalidPrintfArgType_uint","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Invalid printf argument type (unsigned integer required)","isActive":true,"properties":{},"cwe":0},{"code":"invalidscanf","name":"invalidscanf","type":"NONE","version":"0.10.3","description":"scanf without field width limits can crash with huge input data","isActive":false,"properties":{},"cwe":0},{"code":"invalidscanfargtype","name":"invalidScanfArgType","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"scanf argument no. 1: requires non-const pointers or arrays as arguments","isActive":true,"properties":{},"cwe":0},{"code":"invalidscanfargtype_int","name":"invalidscanfargtype_int","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Invalid scanf argument type int. ","isActive":true,"properties":{},"cwe":0},{"code":"invalidscanfformatwidth","name":"invalidScanfFormatWidth","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"wrong width for scanf parameter","isActive":true,"properties":{},"cwe":0},{"code":"iowithoutpositioning","name":"IOWithoutPositioning","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Read and write operations without a call to a positioning function","isActive":true,"properties":{},"cwe":0},{"code":"iterators","name":"iterators","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Same iterator is used with two different containers","isActive":true,"properties":{},"cwe":0},{"code":"leaknovarfunctioncall","name":"leakNoVarFunctionCall","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Memory leak across function calls","isActive":true,"properties":{},"cwe":0},{"code":"leakreturnvalnotused","name":"leakreturnvalnotused","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Return value of function not checked. ","isActive":true,"properties":{},"cwe":0},{"code":"literalwithcharptrcompare","name":"literalWithCharPtrCompare","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"String literal compared with a variable","isActive":true,"properties":{},"cwe":0},{"code":"malloconclasserror","name":"mallocOnClassError","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Bad memory allocation for class containing std::string.","isActive":true,"properties":{},"cwe":0},{"code":"malloconclasswarning","name":"mallocOnClassWarning","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Memory for class instance allocated with malloc(), but class provides constructors.","isActive":true,"properties":{},"cwe":0},{"code":"memleak","name":"memleak","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Memory leak","isActive":true,"properties":{},"cwe":0},{"code":"memleakonrealloc","name":"memleakOnRealloc","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Common realloc mistake: variable nulled but not freed upon failure","isActive":true,"properties":{},"cwe":0},{"code":"memsetclass","name":"memsetClass","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Invalid usage of memset|memmove|memcpy on classes","isActive":true,"properties":{},"cwe":0},{"code":"memsetfloat","name":"memsetFloat","type":"REVIEW","version":"0.10.3","description":"NONE","isActive":false,"properties":{},"cwe":0},{"code":"memsetvalueoutofrange","name":"memsetvalueoutofrange","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"memset() with a value out of range as the 2nd parameter.","isActive":true,"properties":{},"cwe":0},{"code":"memsetzerobytes","name":"memsetZeroBytes","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Effectless memset() call","isActive":true,"properties":{},"cwe":0},{"code":"mismatchallocdealloc","name":"mismatchAllocDealloc","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Mismatching allocation and deallocation","isActive":true,"properties":{},"cwe":0},{"code":"mismatchingbitand","name":"mismatchingBitAnd","type":"NONE","version":"0.10.3","description":"Mismatching bitmasks.","isActive":false,"properties":{},"cwe":0},{"code":"mismatchingcontainers","name":"mismatchingContainers","type":"NONE","version":"0.10.3","description":"Mismatching containers","isActive":false,"properties":{},"cwe":0},{"code":"mismatchsize","name":"mismatchSize","type":"NONE","version":"0.10.3","description":"The given size is mismatching","isActive":false,"properties":{},"cwe":0},{"code":"missinginclude","name":"missingInclude","type":"NONE","version":"0.10.3","description":"Missing include","isActive":false,"properties":{},"cwe":0},{"code":"missingincludesystem","name":"missingIncludeSystem","type":"NONE","version":"0.10.3","description":"Included file not found.","isActive":false,"properties":{},"cwe":0},{"code":"missingpercentcharacter","name":"missingPercentCharacter","type":"NONE","version":"0.10.3","description":"Missing percent end character in pattern","isActive":false,"properties":{},"cwe":0},{"code":"missingscanfformatwidth","name":"missingScanfFormatWidth","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"wrong width for scanf parameter","isActive":true,"properties":{},"cwe":0},{"code":"moduloalwaystruefalse","name":"moduloAlwaysTrueFalse","type":"NONE","version":"0.10.3","description":"Comparison of modulo result is predetermined","isActive":false,"properties":{},"cwe":0},{"code":"multicondition","name":"multiCondition","type":"NONE","version":"0.10.3","description":"\u0027else if\u0027 condition matches previous condition","isActive":false,"properties":{},"cwe":0},{"code":"negativeindex","name":"negativeIndex","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Negative array index","isActive":true,"properties":{},"cwe":0},{"code":"noconstructor","name":"noConstructor","type":"NONE","version":"0.10.3","description":"Class does not have a constructor","isActive":false,"properties":{},"cwe":0},{"code":"nocopyconstructor","name":"noCopyConstructor","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"\u0027classname\u0027 does not have a copy constructor which is recommended since the class contains a pointer to allocated memory","isActive":true,"properties":{},"cwe":0},{"code":"noexplicitconstructor","name":"noexplicitconstructor","type":"BOTH","severityCode":"CRC","version":"0.10.3","description":"Class has a constructor with 1 argument that is not explicit.","isActive":true,"properties":{},"cwe":0},{"code":"noexplicitcopymoveconstructor","name":"noexplicitcopymoveconstructor","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"No explicit copy move constructor. ","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsasctime","name":"nonreentrantFunctionsasctime","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027asctime\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionscrypt","name":"nonreentrantFunctionscrypt","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027crypt\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsctermid","name":"nonreentrantFunctionsctermid","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027ctermid\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsctime","name":"nonreentrantFunctionsctime","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027ctime\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsecvt","name":"nonreentrantFunctionsecvt","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027ecvt\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsfcvt","name":"nonreentrantFunctionsfcvt","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027fcvt\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsfgetgrent","name":"nonreentrantFunctionsfgetgrent","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027fgetgrent\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsfgetpwent","name":"nonreentrantFunctionsfgetpwent","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027fgetpwent\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsfgetspent","name":"nonreentrantFunctionsfgetspent","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027fgetspent\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgcvt","name":"nonreentrantFunctionsgcvt","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027gcvt\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetgrent","name":"nonreentrantFunctionsgetgrent","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getgrent\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetgrgid","name":"nonreentrantFunctionsgetgrgid","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getgrgid\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetgrnam","name":"nonreentrantFunctionsgetgrnam","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getgrnam\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgethostbyaddr","name":"nonreentrantFunctionsgethostbyaddr","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027gethostbyaddr\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgethostbyname","name":"nonreentrantFunctionsgethostbyname","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"For threadsafe applications it is recommended to use the reentrant replacement function /gethostbyname_r/","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgethostbyname2","name":"nonreentrantFunctionsgethostbyname2","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027gethostbyname2\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgethostent","name":"nonreentrantFunctionsgethostent","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027gethostent\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetlogin","name":"nonreentrantFunctionsgetlogin","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getlogin\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetnetbyaddr","name":"nonreentrantFunctionsgetnetbyaddr","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getnetbyaddr\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetnetbyname","name":"nonreentrantFunctionsgetnetbyname","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getnetbyname\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetnetgrent","name":"nonreentrantFunctionsgetnetgrent","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getnetgrent\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetprotobyname","name":"nonreentrantFunctionsgetprotobyname","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getprotobyname\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetpwent","name":"nonreentrantFunctionsgetpwent","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getpwent\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetpwnam","name":"nonreentrantFunctionsgetpwnam","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getpwnam\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetpwuid","name":"nonreentrantFunctionsgetpwuid","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getpwuid\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetrpcbyname","name":"nonreentrantFunctionsgetrpcbyname","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getrpcbyname\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetrpcbynumber","name":"nonreentrantFunctionsgetrpcbynumber","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getrpcbynumber\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetrpcent","name":"nonreentrantFunctionsgetrpcent","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getrpcent\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetservbyname","name":"nonreentrantFunctionsgetservbyname","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getservbyname\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetservbyport","name":"nonreentrantFunctionsgetservbyport","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getservbyport\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetservent","name":"nonreentrantFunctionsgetservent","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getservent\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetspent","name":"nonreentrantFunctionsgetspent","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getspent\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgetspnam","name":"nonreentrantFunctionsgetspnam","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027getspnam\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsgmtime","name":"nonreentrantFunctionsgmtime","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027gmtime\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionslocaltime","name":"nonreentrantFunctionslocaltime","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"For threadsafe applications it is recommended to use the reentrant replacement function /localtime_r/","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsrand","name":"nonreentrantFunctionsrand","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027rand\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsreaddir","name":"nonreentrantFunctionsreaddir","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"For threadsafe applications it is recommended to use the reentrant replacement function /readdir_r/","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsstrtok","name":"nonreentrantFunctionsstrtok","type":"BOTH","severityCode":"ETC","version":"0.10.3","description":"For threadsafe applications it is recommended to use the reentrant replacement function /strtok_r/","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionstempnam","name":"nonreentrantFunctionstempnam","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027tempnam\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionstmpnam","name":"nonreentrantFunctionstmpnam","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027tmpnam\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nonreentrantfunctionsttyname","name":"nonreentrantFunctionsttyname","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Avoid usage of the function \u0027ttyname\u0027","isActive":true,"properties":{},"cwe":0},{"code":"nullpointer","name":"nullPointer","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Possible null pointer dereference","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsasctime","name":"obsoleteFunctionsasctime","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027asctime\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsasctime_r","name":"obsoleteFunctionsasctime_r","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027asctime_r\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsbcmp","name":"obsoleteFunctionsbcmp","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027bcmp\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsbcopy","name":"obsoleteFunctionsbcopy","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027bcopy\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsbrand_r","name":"obsoleteFunctionsbrand_r","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027brand_r\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsbsd_signal","name":"obsoleteFunctionsbsd_signal","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027bsd_signal\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsbzero","name":"obsoleteFunctionsbzero","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027bzero\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsctime","name":"obsoleteFunctionsctime","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027ctime\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsctime_r","name":"obsoleteFunctionsctime_r","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027ctime_r\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsecvt","name":"obsoleteFunctionsecvt","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027ecvt\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsfcvt","name":"obsoleteFunctionsfcvt","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027fcvt\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsftime","name":"obsoleteFunctionsftime","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027ftime\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsgcvt","name":"obsoleteFunctionsgcvt","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027gcvt\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsgetcontext","name":"obsoleteFunctionsgetcontext","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027getcontext\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsgethostbyaddr","name":"obsoleteFunctionsgethostbyaddr","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027gethostbyaddr\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsgethostbyname","name":"obsoleteFunctionsgethostbyname","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027gethostbyname\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsgets","name":"obsoleteFunctionsgets","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027gets\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsgetwd","name":"obsoleteFunctionsgetwd","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027getwd\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsindex","name":"obsoleteFunctionsindex","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027index\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsmakecontext","name":"obsoleteFunctionsmakecontext","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027makecontext\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionspthread_attr_getstackaddr","name":"obsoleteFunctionspthread_attr_getstackaddr","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027pthread_attr_getstackaddr\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionspthread_attr_setstackaddr","name":"obsoleteFunctionspthread_attr_setstackaddr","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027pthread_attr_setstackaddr\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsrand_r","name":"obsoleteFunctionsrand_r","type":"NONE","version":"0.10.3","description":"Avoid usage of the function \u0027rand_r\u0027","isActive":false,"properties":{},"cwe":0},{"code":"obsoletefunctionsrindex","name":"obsoleteFunctionsrindex","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027rindex\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsscalbln","name":"obsoleteFunctionsscalbln","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027scalb\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsswapcontext","name":"obsoleteFunctionsswapcontext","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027swapcontext\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionstmpnam","name":"obsoleteFunctionstmpnam","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027tmpnam\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionstmpnam_r","name":"obsoleteFunctionstmpnam_r","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027tmpnam_r\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsualarm","name":"obsoleteFunctionsualarm","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027ualarm\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsusleep","name":"obsoleteFunctionsusleep","type":"NONE","version":"0.10.3","description":"Avoid usage of the function \u0027usleep\u0027","isActive":false,"properties":{},"cwe":0},{"code":"obsoletefunctionsutime","name":"obsoleteFunctionsutime","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027utime\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionsvfork","name":"obsoleteFunctionsvfork","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027vfork\u0027","isActive":true,"properties":{},"cwe":0},{"code":"obsoletefunctionswcswcs","name":"obsoleteFunctionswcswcs","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Avoid usage of the function \u0027wcswcs\u0027","isActive":true,"properties":{},"cwe":0},{"code":"operatoreq","name":"operatorEq","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"\u0027class::operator\u003d\u0027 should return \u0027class \u0026\u0027","isActive":true,"properties":{},"cwe":0},{"code":"operatoreqretrefthis","name":"operatorEqRetRefThis","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"\u0027operator\u003d\u0027 should return reference to self","isActive":true,"properties":{},"cwe":0},{"code":"operatoreqtoself","name":"operatorEqToSelf","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"\u0027operator\u003d\u0027 should check for assignment to self","isActive":true,"properties":{},"cwe":0},{"code":"operatoreqvarerror","name":"operatorEqVarError","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Member variable is not assigned a value in the assignment operator","isActive":true,"properties":{},"cwe":0},{"code":"oppositeinnercondition","name":"oppositeInnerCondition","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Opposite conditions in nested \u0027if\u0027 blocks lead to a dead code block","isActive":true,"properties":{},"cwe":0},{"code":"outofbounds","name":"outOfBounds","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Index is out of bounds: Supplied size is larger than actual size","isActive":true,"properties":{},"cwe":0},{"code":"passedbyvalue","name":"passedByValue","type":"NONE","version":"0.10.3","description":"Function parameter should be passed by reference","isActive":false,"properties":{},"cwe":0},{"code":"pointerlessthanzero","name":"pointerLessThanZero","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"A pointer can not be negative so it is either pointless or an error to check if it is","isActive":true,"properties":{},"cwe":0},{"code":"pointeroutofbounds","name":"pointerOutOfBounds","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Array pointer out of bounds","isActive":true,"properties":{},"cwe":0},{"code":"pointerpositive","name":"pointerPositive","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"A pointer can not be negative so it is either pointless or an error to check if it is not","isActive":true,"properties":{},"cwe":0},{"code":"pointersize","name":"pointerSize","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Using size of pointer variable instead of size of its data","isActive":true,"properties":{},"cwe":0},{"code":"possiblebufferaccessoutofbounds","name":"possibleBufferAccessOutOfBounds","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Possible buffer overflow if strlen(source) is larger than or equal to sizeof(destination)","isActive":true,"properties":{},"cwe":0},{"code":"possiblereadlinkbufferoverrun","name":"possibleReadlinkBufferOverrun","type":"NONE","version":"0.10.3","description":"Function might return the full size of variable","isActive":false,"properties":{},"cwe":0},{"code":"postfixoperator","name":"postfixOperator","type":"REVIEW","version":"0.10.3","description":"Prefer prefix ++/-- operators for non-primitive types","isActive":false,"properties":{},"cwe":0},{"code":"preprocessorerrordirective","name":"preprocessorErrorDirective","type":"NONE","version":"0.10.3","description":"Preprocessor directive error","isActive":false,"properties":{},"cwe":0},{"code":"publicallocationerror","name":"publicAllocationError","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Possible leak in public function","isActive":true,"properties":{},"cwe":0},{"code":"purgedconfiguration","name":"purgedConfiguration","type":"NONE","version":"0.10.3","description":"The configuration was not checked because its code equals another one. ","isActive":false,"properties":{},"cwe":0},{"code":"readwriteonlyfile","name":"readWriteOnlyFile","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Read operation on a file that was opened only for writing","isActive":true,"properties":{},"cwe":0},{"code":"redundantassigninswitch","name":"redundantAssignInSwitch","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Redundant assignment in switch","isActive":true,"properties":{},"cwe":0},{"code":"redundantassignment","name":"redundantAssignment","type":"REVIEW","version":"0.10.3","description":"Variable \u0027var\u0027 is reassigned a value before the old one has been used","isActive":false,"properties":{},"cwe":0},{"code":"redundantbitwiseoperationinswitch","name":"redundantBitwiseOperationInSwitch","type":"NONE","version":"0.10.3","description":"Redundant bitwise operation on variable in switch","isActive":false,"properties":{},"cwe":0},{"code":"redundantcondition","name":"redundantCondition","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Redundant condition is always true","isActive":true,"properties":{},"cwe":0},{"code":"redundantcopy","name":"redundantCopy","type":"NONE","version":"0.10.3","description":"Buffer \u0027var\u0027 is being written before its old content has been used","isActive":false,"properties":{},"cwe":0},{"code":"redundantcopyinswitch","name":"redundantCopyInSwitch","type":"NONE","version":"0.10.3","description":"Buffer \u0027var\u0027 is being written before its old content has been used","isActive":false,"properties":{},"cwe":0},{"code":"redundantcopylocalconst","name":"redundantCopyLocalConst","type":"NONE","version":"0.10.3","description":"Use const reference for \u0027varname\u0027 to avoid unnecessary data copying","isActive":false,"properties":{},"cwe":0},{"code":"redundantifremove","name":"redundantIfRemove","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Redundant checking of STL container element","isActive":true,"properties":{},"cwe":0},{"code":"redundantnextprevious","name":"redundantNextPrevious","type":"NONE","version":"0.10.3","description":"Call to \u0027Token::func1()\u0027 followed by \u0027Token::func2()\u0027 can be simplified","isActive":false,"properties":{},"cwe":0},{"code":"redundantoperationinswitch","name":"redundantOperationInSwitch","type":"NONE","version":"0.10.3","description":"Redundant operation on \u0027varname\u0027 in switch","isActive":false,"properties":{},"cwe":0},{"code":"redundantpointerop","name":"redundantpointerop","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Redundant pointer operation. ","isActive":true,"properties":{},"cwe":0},{"code":"redundantstrcpyinswitch","name":"redundantStrcpyInSwitch","type":"NONE","version":"0.10.3","description":"Redundant strcpy in switch","isActive":false,"properties":{},"cwe":0},{"code":"resourceleak","name":"resourceLeak","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Resource leak","isActive":true,"properties":{},"cwe":0},{"code":"returnaddressofautovariable","name":"returnAddressOfAutoVariable","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Return of the address of an auto-variable","isActive":true,"properties":{},"cwe":0},{"code":"returnaddressoffunctionparameter","name":"returnAddressOfFunctionParameter","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Return the address of a function parameter","isActive":true,"properties":{},"cwe":0},{"code":"returnautocstr","name":"returnAutocstr","type":"NONE","version":"0.10.3","description":"Returning pointer to auto variable","isActive":false,"properties":{},"cwe":0},{"code":"returnlocalvariable","name":"returnLocalVariable","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Returning pointer to local array variable","isActive":true,"properties":{},"cwe":0},{"code":"returnreference","name":"returnReference","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Returning reference to auto variable","isActive":true,"properties":{},"cwe":0},{"code":"returntemppointer","name":"returnTempPointer","type":"NONE","version":"0.10.3","description":"Returning pointer to temporary","isActive":false,"properties":{},"cwe":0},{"code":"returntempreference","name":"returnTempReference","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Returning reference to temporary","isActive":true,"properties":{},"cwe":0},{"code":"secondalwaystruefalsewhenfirsttrue","name":"secondAlwaysTrueFalseWhenFirstTrue","type":"NONE","version":"0.10.3","description":"Redundant condition","isActive":false,"properties":{},"cwe":0},{"code":"selfassignment","name":"selfAssignment","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Redundant assignment to itself","isActive":true,"properties":{},"cwe":0},{"code":"shiftnegative","name":"shiftNegative","type":"NONE","version":"0.10.3","description":"Shifting by a negative value","isActive":false,"properties":{},"cwe":0},{"code":"simplepatternerror","name":"simplePatternError","type":"NONE","version":"0.10.3","description":"Found simple pattern inside call","isActive":false,"properties":{},"cwe":0},{"code":"sizeargumentaschar","name":"sizeArgumentAsChar","type":"NONE","version":"0.10.3","description":"The size argument is given as a char constant","isActive":false,"properties":{},"cwe":0},{"code":"sizeofcalculation","name":"sizeofCalculation","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Found calculation inside sizeof()","isActive":true,"properties":{},"cwe":0},{"code":"sizeofdivisionmemfunc","name":"sizeofdivisionmemfunc","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Sizeof division mem function. ","isActive":true,"properties":{},"cwe":0},{"code":"sizeofsizeof","name":"sizeofsizeof","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Calling sizeof for \u0027sizeof\u0027","isActive":true,"properties":{},"cwe":0},{"code":"sizeofvoid","name":"sizeofvoid","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Size of void. ","isActive":true,"properties":{},"cwe":0},{"code":"sizeofwithnumericparameter","name":"sizeofwithnumericparameter","type":"NONE","version":"0.10.3","description":"Using sizeof with a numeric constant as function argument might not be what you intended","isActive":false,"properties":{},"cwe":0},{"code":"sizeofwithsilentarraypointer","name":"sizeofwithsilentarraypointer","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Using sizeof for array given as function argument returns the size of pointer","isActive":true,"properties":{},"cwe":0},{"code":"sprintfoverlappingdata","name":"sprintfOverlappingData","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Undefined behavior: variable is used as parameter and destination in s[n]printf()","isActive":true,"properties":{},"cwe":0},{"code":"staticstringcompare","name":"staticStringCompare","type":"NONE","version":"0.10.3","description":"Unnecessary comparison of static strings","isActive":false,"properties":{},"cwe":0},{"code":"stlboundaries","name":"stlBoundaries","type":"NONE","version":"0.10.3","description":"Dangerous iterator comparison using operator \u003c.","isActive":false,"properties":{},"cwe":0},{"code":"stlboundries","name":"stlBoundries","type":"NONE","version":"0.10.3","description":"Dangerous container iterator compare using \u003c operator for container","isActive":false,"properties":{},"cwe":0},{"code":"stlcstr","name":"stlcstr","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Dangerous usage of c_str(). The returned value by c_str() is invalid after this call","isActive":true,"properties":{},"cwe":0},{"code":"stlcstrparam","name":"stlcstrParam","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Redundant c_str()-conversion in parameter passing","isActive":true,"properties":{},"cwe":0},{"code":"stlcstrreturn","name":"stlcstrReturn","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Redundant c_str()-conversion in functions return","isActive":true,"properties":{},"cwe":0},{"code":"stlcstrthrow","name":"stlcstrthrow","type":"NONE","version":"0.10.3","description":"The returned value by c_str() is invalid after throw call","isActive":false,"properties":{},"cwe":0},{"code":"stliffind","name":"stlIfFind","type":"NONE","version":"0.10.3","description":"Suspicious condition. The result of find is an iterator, but it is not properly checked","isActive":false,"properties":{},"cwe":0},{"code":"stlifstrfind","name":"stlIfStrFind","type":"NONE","version":"0.10.3","description":"Suspicious checking of string::find() return value","isActive":false,"properties":{},"cwe":0},{"code":"stlmissingcomparison","name":"StlMissingComparison","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Missing bounds check for extra iterator increment in loop","isActive":true,"properties":{},"cwe":0},{"code":"stloutofbounds","name":"stlOutOfBounds","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"When i\u003d\u003dfoo.size(), foo[i] is out of bounds","isActive":true,"properties":{},"cwe":0},{"code":"stlsize","name":"stlSize","type":"REVIEW","version":"0.10.3","description":"Prefer .empty() to .size() \u003d\u003d 0 for emptiness checking","isActive":false,"properties":{},"cwe":0},{"code":"stringcompare","name":"stringCompare","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Comparison of identical string variables","isActive":true,"properties":{},"cwe":0},{"code":"strncatusage","name":"strncatUsage","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Dangerous usage of strncat","isActive":true,"properties":{},"cwe":0},{"code":"strpluschar","name":"strPlusChar","type":"NONE","version":"0.10.3","description":"Unusual pointer arithmetic","isActive":false,"properties":{},"cwe":0},{"code":"suspicioussemicolon","name":"suspiciousSemicolon","type":"NONE","version":"0.10.3","description":"Suspicious use of ; at the end of \u0027if/for/while\u0027 statement","isActive":false,"properties":{},"cwe":0},{"code":"switchcasefallthrough","name":"switchCaseFallThrough","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Switch falls through case without comment","isActive":true,"properties":{},"cwe":0},{"code":"syntaxerror","name":"syntaxError","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Syntax error","isActive":true,"properties":{},"cwe":0},{"code":"terminatestrncpy","name":"terminateStrncpy","type":"NONE","version":"0.10.3","description":"The buffer may not be zero-terminated after the call to strncpy()","isActive":false,"properties":{},"cwe":0},{"code":"thissubtraction","name":"thisSubtraction","type":"NONE","version":"0.10.3","description":"Suspicious pointer subtraction","isActive":false,"properties":{},"cwe":0},{"code":"toobigsleeptime","name":"tooBigSleepTime","type":"BOTH","severityCode":"ETC","version":"0.10.3","description":"Invalid argument for usleep","isActive":true,"properties":{},"cwe":0},{"code":"toomanyconfigs","name":"tooManyConfigs","type":"NONE","version":"0.10.3","description":"The checking of the file will be interrupted because there are too many #ifdef configurations.","isActive":false,"properties":{},"cwe":0},{"code":"udiverror","name":"udivError","type":"NONE","version":"0.10.3","description":"Unsigned division. The result will be wrong","isActive":false,"properties":{},"cwe":0},{"code":"unassignedvariable","name":"unassignedVariable","type":"NONE","version":"0.10.3","description":"Variable is not assigned a value","isActive":false,"properties":{},"cwe":0},{"code":"uninitdata","name":"uninitdata","type":"NONE","version":"0.10.3","description":"Data is allocated but not initialized","isActive":false,"properties":{},"cwe":0},{"code":"uninitmembervar","name":"uninitMemberVar","type":"NONE","version":"0.10.3","description":"Member variable is not initialized in the constructor","isActive":false,"properties":{},"cwe":0},{"code":"uninitstring","name":"uninitstring","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Dangerous usage of variable (strncpy doesn\u0027t always 0-terminate it)","isActive":true,"properties":{},"cwe":0},{"code":"uninitstructmember","name":"uninitStructMember","type":"NONE","version":"0.10.3","description":"Uninitialized struct member","isActive":false,"properties":{},"cwe":0},{"code":"uninitvar","name":"uninitvar","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Uninitialized variable","isActive":true,"properties":{},"cwe":0},{"code":"unknownpattern","name":"unknownPattern","type":"NONE","version":"0.10.3","description":"Unknown pattern used","isActive":false,"properties":{},"cwe":0},{"code":"unnecessaryforwarddeclaration","name":"unnecessaryForwardDeclaration","type":"NONE","version":"0.10.3","description":"Redundant forward declaration","isActive":false,"properties":{},"cwe":0},{"code":"unnecessaryqualification","name":"unnecessaryQualification","type":"NONE","version":"0.10.3","description":"Unnecessary qualification","isActive":false,"properties":{},"cwe":0},{"code":"unreachablecode","name":"unreachableCode","type":"NONE","version":"0.10.3","description":"Statements following return, break, continue, goto or throw will never be executed","isActive":false,"properties":{},"cwe":0},{"code":"unreadvariable","name":"unreadVariable","type":"REVIEW","version":"0.10.3","description":"Unused value","isActive":false,"properties":{},"cwe":0},{"code":"unsafeclasscanleak","name":"unsafeClassCanLeak","type":"NONE","version":"0.10.3","description":"Class \u0027classname\u0027 is unsafe, \u0027varname\u0027 can leak by wrong usage","isActive":false,"properties":{},"cwe":0},{"code":"unsignedlessthanzero","name":"unsignedLessThanZero","type":"REVIEW","version":"0.10.3","description":"Checking if unsigned variable is less than zero","isActive":false,"properties":{},"cwe":0},{"code":"unsignedpositive","name":"unsignedPositive","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"An unsigned variable can\u0027t be negative so it is unnecessary to test it","isActive":true,"properties":{},"cwe":0},{"code":"unusedallocatedmemory","name":"unusedAllocatedMemory","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Variable is allocated memory that is never used","isActive":true,"properties":{},"cwe":0},{"code":"unusedfunction","name":"unusedFunction","type":"NONE","version":"0.10.3","description":"Unused function","isActive":false,"properties":{},"cwe":0},{"code":"unusedprivatefunction","name":"unusedPrivateFunction","type":"REVIEW","version":"0.10.3","description":"Unused private function","isActive":false,"properties":{},"cwe":0},{"code":"unusedscopedobject","name":"unusedScopedObject","type":"NONE","version":"0.10.3","description":"Instance destroyed immediately","isActive":false,"properties":{},"cwe":0},{"code":"unusedstructmember","name":"unusedStructMember","type":"NONE","version":"0.10.3","description":"Unused struct or union member","isActive":false,"properties":{},"cwe":0},{"code":"unusedvariable","name":"unusedVariable","type":"NONE","version":"0.10.3","description":"Unused variable","isActive":false,"properties":{},"cwe":0},{"code":"useautopointerarray","name":"useAutoPointerArray","type":"NONE","version":"0.10.3","description":"Usage of \u0027auto_ptr\u0027 for pointers obtained with operator \u0027new[]\u0027","isActive":false,"properties":{},"cwe":0},{"code":"useautopointercontainer","name":"useAutoPointerContainer","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Don\u0027t store \u0027auto-ptr\u0027 in a STL container","isActive":true,"properties":{},"cwe":0},{"code":"useautopointercopy","name":"useAutoPointerCopy","type":"NONE","version":"0.10.3","description":"Be careful when using \u0027auto_ptr\u0027 copy","isActive":false,"properties":{},"cwe":0},{"code":"useclosedfile","name":"useClosedFile","type":"NONE","version":"0.10.3","description":"Used file that is not opened","isActive":false,"properties":{},"cwe":0},{"code":"useinitializationlist","name":"useInitializationList","type":"REVIEW","version":"0.10.3","description":"member variable shall be initialized using constructor","isActive":false,"properties":{},"cwe":0},{"code":"uselessassignmentarg","name":"uselessassignmentarg","type":"BOTH","severityCode":"CRC","version":"0.10.3","description":"Assignment of function parameter has no effect outside the function.","isActive":true,"properties":{},"cwe":0},{"code":"uselessassignmentptrarg","name":"uselessAssignmentPtrArg","type":"BOTH","severityCode":"CRC","version":"0.10.3","description":"Effectless function parameter assignment.","isActive":true,"properties":{},"cwe":0},{"code":"uselesscallscompare","name":"uselessCallsCompare","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"It is inefficient to call \u0027str.find(str)\u0027 as it always returns 0","isActive":true,"properties":{},"cwe":0},{"code":"uselesscallsempty","name":"uselessCallsEmpty","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Useless call of function \u0027empty()\u0027","isActive":true,"properties":{},"cwe":0},{"code":"uselesscallsremove","name":"uselessCallsRemove","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Return value of std::remove() ignored","isActive":true,"properties":{},"cwe":0},{"code":"uselesscallssubstr","name":"uselessCallsSubstr","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Function \u0027substr\u0027 useless call. Function create copy of the \u0027str\u0027 object","isActive":true,"properties":{},"cwe":0},{"code":"uselesscallsswap","name":"uselessCallsSwap","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"It is inefficient to swap a object with itself by calling \u0027str.swap(str)\u0027","isActive":true,"properties":{},"cwe":0},{"code":"va_end_missing","name":"va_end_missing","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"va_end missing. ","isActive":true,"properties":{},"cwe":0},{"code":"va_list_usedbeforestarted","name":"va_list_usedbeforestarted","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"va_list used before started.","isActive":true,"properties":{},"cwe":0},{"code":"va_start_subsequentcalls","name":"va_start_subsequentcalls","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"va_start subsequent call.","isActive":true,"properties":{},"cwe":0},{"code":"varfuncnullub","name":"varFuncNullUB","type":"NONE","version":"0.10.3","description":"Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.","isActive":false,"properties":{},"cwe":0},{"code":"variablehidingenum","name":"variableHidingEnum","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Variable hides enumerator with same name","isActive":true,"properties":{},"cwe":0},{"code":"variablehidingtypedef","name":"variableHidingTypedef","type":"NONE","version":"0.10.3","description":"Variable hides typedef with same name","isActive":false,"properties":{},"cwe":0},{"code":"variablescope","name":"variableScope","type":"NONE","version":"0.10.3","description":"The scope of the variable can be reduced","isActive":false,"properties":{},"cwe":0},{"code":"virtualdestructor","name":"virtualDestructor","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Base classes should have virtual destructors","isActive":true,"properties":{},"cwe":0},{"code":"writeoutsidebuffersize","name":"writeOutsideBufferSize","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Writing \u00271\u0027 bytes outside buffer size.","isActive":true,"properties":{},"cwe":0},{"code":"writereadonlyfile","name":"writeReadOnlyFile","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Write operation on a file that was opened only for reading","isActive":true,"properties":{},"cwe":0},{"code":"wrongcctypecall","name":"wrongcctypecall","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Wrong usage of a function from the ctype-family","isActive":true,"properties":{},"cwe":0},{"code":"wrongmathcall","name":"wrongmathcall","type":"NONE","version":"0.10.3","description":"Passing value to () leads to undefined result","isActive":false,"properties":{},"cwe":0},{"code":"wrongpipeparametersize","name":"wrongPipeParameterSize","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"A buffer must have size of 2 integers if used as parameter of pipe().","isActive":true,"properties":{},"cwe":0},{"code":"wrongprintfscanfargnum","name":"wrongPrintfScanfArgNum","type":"BOTH","severityCode":"MAJ","version":"0.10.3","description":"Wrong number of parameters given to printf()","isActive":true,"properties":{},"cwe":0},{"code":"zerodiv","name":"zerodiv","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Division by zero","isActive":true,"properties":{},"cwe":0},{"code":"zerodivcond","name":"zerodivcond","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"Either the condition is useless or there is division by zero","isActive":true,"properties":{},"cwe":0},{"code":"sec_cij_system","name":"sec_cij_system","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"non abs command injection","isActive":true,"properties":{},"cwe":0},{"code":"sec_cij_exec","name":"sec_cij_exec","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"non abs command injection","isActive":true,"properties":{},"cwe":0},{"code":"sec_cij_app_control","name":"sec_cij_app_control","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"non abs command injection","isActive":true,"properties":{},"cwe":0},{"code":"sec_cij_aul_launch_app","name":"sec_cij_aul_launch_app","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"non abs command injection","isActive":true,"properties":{},"cwe":0},{"code":"sec_cij_popen","name":"sec_cij_popen","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"non abs command injection","isActive":true,"properties":{},"cwe":0},{"code":"sec_cij_sqlite3_exec","name":"sec_cij_sqlite3_exec","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"non abs command injection","isActive":true,"properties":{},"cwe":0},{"code":"sec_dc_curlopt_post","name":"sec_dc_curlopt_post","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"CURLOPT_POST is disabled.","isActive":true,"properties":{},"cwe":0},{"code":"sec_dc_curlopt_ssl_verifypeer","name":"sec_dc_curlopt_ssl_verifypeer","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"CURLOPT_SSL_VERIFYPEER is disabled.","isActive":true,"properties":{},"cwe":0},{"code":"sec_dc_curlopt_ssl_verifyhost","name":"sec_dc_curlopt_ssl_verifyhost","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"CURLOPT_SSL_VERIFYHOST is disabled.","isActive":true,"properties":{},"cwe":0},{"code":"sec_dc_curlopt_ssl_version","name":"sec_dc_curlopt_ssl_version","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"CURL_SSLVERSION_SSLv2_3 is not permitted.","isActive":true,"properties":{},"cwe":0},{"code":"sec_ri_https","name":"sec_ri_https","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you should not save important value without encrypt it","isActive":true,"properties":{},"cwe":0},{"code":"sec_ri_secure_storage","name":"sec_ri_secure_storage","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you have hardcoded an important information. use secure storage instead.","isActive":true,"properties":{},"cwe":0},{"code":"sec_ins_input_proc","name":"sec_ins_input_proc","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you should not use atoied value directly to ptr operation. you need to check it\u0027s range and validity","isActive":true,"properties":{},"cwe":0},{"code":"sec_acc_control","name":"sec_acc_control","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"chmod : you requested too much permission.","isActive":true,"properties":{},"cwe":0},{"code":"sec_per_seteuid","name":"sec_per_seteuid","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you should not call.","isActive":true,"properties":{},"cwe":0},{"code":"sec_per_setegid","name":"sec_per_setegid","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you should not call.","isActive":true,"properties":{},"cwe":0},{"code":"sec_path_modi","name":"sec_path_modi","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"fopen : you should check symbolic link using realpath.","isActive":true,"properties":{},"cwe":0},{"code":"sec_path_modi_chroot","name":"sec_path_modi_chroot","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you should not call.","isActive":true,"properties":{},"cwe":0},{"code":"sec_env_modi","name":"sec_env_modi","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you should not call.","isActive":true,"properties":{},"cwe":0},{"code":"sec_env_use","name":"sec_env_use","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"env value can be hooked by a hacker.","isActive":true,"properties":{},"cwe":0},{"code":"sec_dbg_info","name":"sec_dbg_info","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"security error","isActive":true,"properties":{},"cwe":0},{"code":"sec_enc_ret_priv_addr","name":"sec_enc_ret_priv_addr","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"(broken capsulation) you should not return private array member.","isActive":true,"properties":{},"cwe":0},{"code":"sec_enc_set_priv_mem","name":"sec_enc_set_priv_mem","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"(broken capsulation) you should not assign a ptr to a private member.","isActive":true,"properties":{},"cwe":0},{"code":"sec_wsf_salt","name":"sec_wsf_salt","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"security error","isActive":true,"properties":{},"cwe":0},{"code":"sec_wsf_aes_encrypt","name":"sec_wsf_aes_encrypt","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you should use more long encryption key.","isActive":true,"properties":{},"cwe":0},{"code":"sec_wsf_sha","name":"sec_wsf_sha","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you should use more strong hash function.","isActive":true,"properties":{},"cwe":0},{"code":"sec_wsf_rand","name":"sec_wsf_rand","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"rand : you should call srand before.","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_printf","name":"sec_bof_printf","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you should not call denied function","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_snprintf","name":"sec_bof_snprintf","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you should use constant string for format specifier or not, it can be injected","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_strcpy","name":"sec_bof_strcpy","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you should not call denied function","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_strncpy","name":"sec_bof_strncpy","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"buffer overflow detected","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_strcat","name":"sec_bof_strcat","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you should not call denied function","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_strncat","name":"sec_bof_strncat","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"cannot find sizeof and strlen in 3rd parameter. best practice is strncat (dest, src, sizeof(dest) - 1 - strlen(dest))","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_gets","name":"sec_bof_gets","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you should not call denied function","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_fgets","name":"sec_bof_fgets","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"buffer overflow detected","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_pcstring_print","name":"sec_bof_pcstring_print","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you should use constant string for format specifier or not, it can be injected","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_pcstring_copy","name":"sec_bof_pcstring_copy","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"buffer overflow detected","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_realpath","name":"sec_bof_realpath","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"you need to set buffer size as PATH_MAX","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_scanf_format","name":"sec_bof_scanf_format","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"scanf without field width limits can crash with huge input data.","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_printf_format","name":"sec_bof_printf_format","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"%n is denied in format specifier.","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_pcmem_memcpy","name":"sec_bof_pcmem_memcpy","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"plz check if you copy the null byte. example strlen(x) + 1.","isActive":true,"properties":{},"cwe":0},{"code":"sec_bof_memcpy","name":"sec_bof_memcpy","type":"BOTH","categoryName":"SECURITY","severityCode":"CRI","version":"0.10.3","description":"plz check if you copy the null byte. example strlen(x) + 1.","isActive":true,"properties":{},"cwe":0},{"code":"basicstringtypemisused","name":"basicStringTypeMisused","type":"BOTH","severityCode":"CRI","version":"0.10.3","description":"std::basic_string character type misused. use only (char or wchar_t) types in basic_string (C++98).","isActive":true,"properties":{},"cwe":0},{"code":"assignmenttypecastedaddresstointeger","name":"assignmentTypeCastedAddressToInteger","type":"NONE","version":"0.10.3","description":"Assigning a pointer to an integer is not portable. ","isActive":false,"properties":{},"cwe":0},{"code":"typecastedaddresstointegeratreturn","name":"typeCastedAddressToIntegerAtReturn","type":"NONE","version":"0.10.3","description":"Returning an integer in a function with pointer return type is not portable.","isActive":false,"properties":{},"cwe":0},{"code":"magicnumbermalloc","name":"magicNumberMalloc","type":"NONE","version":"0.10.3","description":"4(magic number) is used in malloc.  ","isActive":false,"properties":{},"cwe":0},{"code":"magicnumberdatatype","name":"magicNumberDataType","type":"NONE","version":"0.10.3","description":"(size_t/long) 0xffffffff is not -1 in 64-bit linux. ","isActive":false,"properties":{},"cwe":0},{"code":"usleepcalled","name":"usleepCalled","type":"NONE","version":"0.10.3","description":"The obsolescent function \u0027usleep\u0027 is called. POSIX.1-2001 declares usleep() function obsolescent and POSIX.1-2008 removes it. It is recommended that new applications use the \u0027nanosleep\u0027 or \u0027setitimer\u0027 function.","isActive":false,"properties":{},"cwe":0},{"code":"nullpointerredundantcheck","name":"nullPointerRedundantCheck","type":"NONE","version":"0.10.3","description":"Either the condition is redundant or there is possible null pointer dereference: pProDetail.","isActive":false,"properties":{},"cwe":0},{"code":"rand_rcalled","name":"rand_rcalled","type":"NONE","version":"0.10.3","description":"Obsolescent function \u0027rand_r\u0027 called. It is recommended to use \u0027rand\u0027 instead.","isActive":false,"properties":{},"cwe":0},{"code":"knownconditiontruefalse","name":"knownConditionTrueFalse","type":"BOTH","severityCode":"MIN","version":"0.10.3","description":"Condition is always false","isActive":true,"properties":{},"cwe":0},{"code":"unusedlabel","name":"unusedlabel","type":"BOTH","categoryName":"","severityCode":"CRC","version":"0.10.3","description":"Label is not used","isActive":true,"properties":{},"cwe":0}],"toolName":"cppcheck","language":"CPP"}